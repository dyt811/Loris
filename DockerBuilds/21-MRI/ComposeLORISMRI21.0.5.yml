version: '3.7'
# This is the Docker-Compose orchestration of LORIS WITH MRI component pre-configured.
# Last updated: 2019-01-20 17:12
# Maintainer: Yang Ding (it@cnbp.ca)


services:

    # This is the database behind the LORIS 21 instance: note all data are stored in the dockerfile
    # DO NOT CHANGE THE service names as some of them are hard coded to dependent on each other.
    lorismridb:

        # Building instructions.
        build:
            context: ../..
            # Still using the same shared Dockerfile from the base LORIS image.
            dockerfile:  DockerBuilds/21/Dockerfile.LORIS${LORIS_version}.db
            # make sure these variables are properly named in the .env files: e.g .PlaceHolderRootPassword
            args:
                - ARGS_MYSQL_ROOT_PASSWORD=${MySQLRootPassword}
            # Environment not specified as the DockerFile is suppose to be standalone and workable too .
        networks:
             - backend

        ports:
            - "${Ext_Port_MySQL}:3306"
        expose:
          - 3306

        image: neonatalbrainplatform/lorisdb:${LORIS_version}-MRI

        logging:
            driver: "none"

        volumes:
            - lorismridbvolume:/var/lib/mysql

    # The loris frontned is HARDCODED to be recognized in subroutines as "loris" DO NOT CHANGE THIS NAME.
    # This is the docker image of running images
    lorismri:
         # Container name and label
        #container_name: LORIS_${tag}

        # Building instructions.
        build:
            context: ../..
            dockerfile: DockerBuilds/21-MRI/Dockerfile.LORISMRI${LORIS_version}.Ubuntu18
            args:
                - ARGS_ProjectName=${ProjectName}
                - ARGS_MySQLHost=${MySQLHost}
                - ARGS_MySQLUser=${MySQLUser}
                - ARGS_MySQLUserPassword=${MySQLUserPassword}
                - ARGS_MySQLDatabase=${MySQLDatabase}
                #- ARGS_LorisMaintenanceEmail=${LorisMaintenanceEmail}

        # Where to push eventually.
        image: neonatalbrainplatform/loris:${LORIS_version}-MRI

        networks:
            - backend

        depends_on:
            - lorismridb

        volumes:
            - lorismrivolume:/var/www
            - lorisdatavolume:/data

        ports:
            - "${Ext_Port_HTTP}:80"
            - "${Ext_Port_HTTPS}:443"

     # This is the selenium image (i.e. worker node) that will run the actual work process which is executed to setup the bridge connection between the database and the front end user interaction
    chrome:
        image: selenium/node-chrome-debug:3.14.0-gallium
        volumes:
            - /dev/shm:/dev/shm
        depends_on:
            - hub
            - lorismri
            - lorismridb
        environment:
            HUB_HOST: hub
            HUB_PORT: 4444
        entrypoint: bash -c 'SE_OPTS="-host $$HOSTNAME" /opt/bin/entry_point.sh'
        networks:
            - backend

    # The hub is HARDCODED to be recognized in subroutines as "hub" DO NOT CHANGE THIS NAME.
    hub:
        image: selenium/hub:3.14.0-gallium
        depends_on:
            - lorismri
            - lorismridb
        ports:
            - "4444:4444"
        networks:
            - backend

    lorismridbsetup:

        build:
            context: ../..
            dockerfile: DockerBuilds/21-MRI/Dockerfile.LORISMRI${LORIS_version}.dbsetup
            args:
                - ARGS_MySQLHost=${MySQLHost}
                - ARGS_MySQLRoot=${MySQLRoot}
                - ARGS_ProjectName=${ProjectName}
                - ARGS_MySQLRootPassword=${MySQLRootPassword}
                - ARGS_MySQLUser=${MySQLUser}
                - ARGS_MySQLUserPassword=${MySQLUserPassword}
                - ARGS_LorisFrontendUser=${LorisFrontendUser}
                - ARGS_LorisFrontendPassword=${LorisFrontendPassword}
                - ARGS_Ext_Port_HTTP=${Ext_Port_HTTP}
                - ARGS_Ext_URL=${Ext_URL}
                #- ARGS_LorisMaintenanceEmail=${LorisMaintenanceEmail}
                - ARGS_MySQLDatabase=${MySQLDatabase} # the database created by default is called LORIS
            # Environment not specified as the DockerFile is suppose to be standalone and workable too .
        # Where to push eventually.
        image: neonatalbrainplatform/lorisdbsetup:${LORIS_version}-MRI
        depends_on: # all these need to be up and running before running the Selenium integrator.
          - lorismri
          - lorismridb
          - hub
          - chrome
        networks:
            - backend
volumes:
    lorismridbvolume:
        # This is where we specify the persistent volume reside and the name which they share under
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${folder_MySQL}

    lorismrivolume:
        # This is where we specify the persistent volume reside and the name which they share under
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${folder_www}

    lorisdatavolume:
        # This is where the imaging data will persist.
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${folder_data}

networks:
    # Networks allow connection with EXTERNAL containers and PROJECTS
    backend:
        driver: "bridge"

# To run:
# docker-compose -f ComposeLORIS21.0.5.yml --force
