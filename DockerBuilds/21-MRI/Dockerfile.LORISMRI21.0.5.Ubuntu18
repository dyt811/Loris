# Built based on the base image without MRI
FROM neonatalbrainplatform/loris:21.0.5

LABEL maintainer="Yang Ding, it@cnbp.ca"
LABEL type="LORIS21.05 MRI Image"
LABEL description="This image couple the frontend of LORIS with a backend MySQL with basic predefined MRI setup."

##########################
# Install LORIS MRI Code
##########################
# Step 1. Create directories and download Loris-MRI code
USER root
# Create the /bin/mri folder .
WORKDIR /data/${ARGS_ProjectName}/bin

# Ensure permissions of the data folder is under lorisadmin.
#RUN chown -R lorisadmin:lorisadmin /data/$ARGS_ProjectName
ADD https://github.com/aces/Loris-MRI/archive/v21.0.5.zip /data/${ARGS_ProjectName}/bin/
RUN unzip v21.0.5.zip
RUN mv Loris-MRI-21.0.5 mri

RUN chown -R lorisadmin:lorisadmin /data

# Step 2. Install Python 3 with pip and virtualenv
RUN apt-get install -y python3 python3-dev python3-pip libmysqlclient-dev
RUN pip3 install virtualenv


# Step 3. Install MINC toolkit from http://bic-mni.github.io/ into the /opt/minc/1.9.17ls folder .
# THIS DOES NOT INSTALL DEFACING SCRIPT
WORKDIR /opt
ADD https://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/minc-toolkit-1.9.17-20190313-Ubuntu_18.04-x86_64.deb .
RUN apt install -f -y ./minc-toolkit-1.9.17-20190313-Ubuntu_18.04-x86_64.deb

# Step 4. Run installer to set up directories, configure environment, install Perl libraries and DICOM toolkit:
WORKDIR /data/${ARGS_ProjectName}/bin/mri/
#bash ./imaging_install.sh

# Install CPANM, must be root.
RUN curl -L http://cpanmin.us | perl - App::cpanminus

# Install perl libraries
RUN cpanm Math::Round DBI DBD::mysql Getopt::Tabular Time::JulianDay Path::Class Archive::Extract Archive::Zip Pod::Perldoc Pod::Markdown Pod::Usage JSON Moose MooseX::Privacy TryCatch Throwable

# Create VENV for python
USER lorisadmin
RUN mkdir -m 770 -p ./python_virtualenvs/loris-mri-python
ENV VIRTUAL_ENV=./python_virtualenvs/loris-mri-python
RUN python3 -m virtualenv --python=/usr/bin/python3 $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install dependencies:
RUN pip3 install mysqlclient mysql-connector pybids pyblake2 mne google protobuf matplotlib nose sklearn nilearn

#RUN virtualenv ./python_virtualenvs/loris-mri-python -p `which python3`
#RUN /bin/bash -c "source ./python_virtualenvs/loris-mri-python/bin/activate"
#RUN pip3 install mysqlclient mysql-connector pybids pyblake2 mne google protobuf matplotlib nose sklearn nilearn
#RUN /bin/bash -c "deactivate"



# Create all the folders
RUN mkdir -m 2770 -p /data/incoming
RUN mkdir -m 2770 -p /data/${ARGS_ProjectName}/data/
# Source: https://stackoverflow.com/questions/30359334/creating-multiple-directories-using-docker-run
# must not have space.
RUN mkdir -m 770 -p /data/${ARGS_ProjectName}/{trashbin,tarchive,pic,logs,assembly,batch_output,bids_imports}

#holds mincs that didn't match protocol
#holds tared dicom-folder
#holds jpegs generated for the MRI-browser
#holds logs from pipeline script
#holds the MINC files
#contains the result of the SGE (queue)
#contains imported BIDS studies
WORKDIR /data/${ARGS_ProjectName}/bin/mri/
RUN mkdir -m 770 -p ./dicom-archive/.loris_mri

# modify the environment script.
RUN sed -i "s#%PROJECT%#${ARGS_ProjectName}#g" ./environment
RUN sed -i "s#%MINC_TOOLKIT_DIR%#/opt/minc/1.9.17#g" ./environment
#Make sure that CIVET stuff are placed in the right place
#source /data/$PROJ/bin/$mridirname/environment
RUN export TMPDIR=/tmp

# group=www-data in Ubuntu 18.04, not www or apache
RUN group=www-data

# updating permission
RUN chmod -R 770 ./dicom-archive/.loris_mri/
RUN chmod -R 770 /data/${ARGS_ProjectName}/
RUN chmod -R 770 /data/incoming/

USER root
# Making lorisadmin part of the apache group
RUN usermod -a -G www-data lorisadmin

#Setting group permissions for all files/dirs under /data/$PROJ/ and /data/incoming/
RUN chgrp www-data -R /data/${ARGS_ProjectName}/
RUN chgrp www-data -R /data/incoming/

#Setting group ID for all files/dirs under /data/$PROJ/data
RUN chmod -R g+s /data/${ARGS_ProjectName}/data/

#Setting group ID for all files/dirs under /data/incoming
RUN chmod -R g+s /data/incoming/

# Creating prod file:
RUN cp ./dicom-archive/profileTemplate.pl ./dicom-archive/.loris_mri/prodDataBase
RUN chmod 640 ./dicom-archive/.loris_mri/prodDataBase
RUN chgrp www-data ./dicom-archive/.loris_mri/prodDataBase

RUN sed -e "s#DBNAME#${ARGS_MySQLDatabase}#g" -e "s#DBUSER#${ARGS_MySQLUser}#g" -e "s#DBPASS#$ARGS_MySQLUserPassword#g" -e "s#DBHOST#$ARGS_MySQLHost#g" ./dicom-archive/profileTemplate.pl > ./dicom-archive/.loris_mri/prodDataBase

#Creating python database config file with database credentials"
RUN cp ./dicom-archive/database_config_template.py ./dicom-archive/.loris_mri/database_config.py
RUN chmod 640 ./dicom-archive/.loris_mri/database_config.py
RUN chgrp www-data ./dicom-archive/.loris_mri/database_config.py
RUN sed -e "s#DBNAME#${ARGS_MySQLDatabase}#g" -e "s#DBUSER#${ARGS_MySQLUser}#g" -e "s#DBPASS#${ARGS_MySQLUserPassword}#g" -e "s#DBHOST#${ARGS_MySQLHost}#g" ./dicom-archive/database_config_template.py > ./dicom-archive/.loris_mri/database_config.py
# config file for python import scripts is located at ./dicom-archive/.loris_mri/database_config.py"

RUN apt-get install -y dcmtk

RUN echo "source /data/${ARGS_ProjectName}/bin/mri/environment" >> /home/lorisadmin/.bashrc

RUN apt-get install -y dnsutils

CMD source /home/lorisadmin/.bashrc


# Run apachecontrol in the foreground

CMD apachectl -D FOREGROUND
# Docker Build Code (In the LORIS root dir):
# docker build -f ./DockerBuilds/Dockerfile.LORIS22.0.0.Ubuntu18 --build-arg project_name=TestLORISProject -t dyt811:v0.7 .

# Docker Run Code (This will bind the configuration interface)
# docker run -d -it -p 8000:80 -p 8443:443 dyt811:v0.7
